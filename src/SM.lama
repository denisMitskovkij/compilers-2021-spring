-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  var res = fun (cf, in) {
    case in of
      LD    (i) -> [cf[1](in.fst):cf[0], cf[1], cf[2]] |
      ST    (i) -> [cf[0].snd, cf[1] <- [in.fst, cf[0].fst], cf[2]] |
      CONST (i) -> [in.fst:cf[0], cf[1], cf[2]] |
      READ      -> [readWorld(cf[2])[0]:cf[0], cf[1], readWorld(cf[2])[1]] |
      WRITE     -> [cf[0].snd, cf[1], writeWorld (cf[0].fst, cf[2])] |
      BINOP (i) -> funcBinop (cf, in) |
      _         -> failure ("Failure at eval - Incorrect expression for sm\n")
    esac
  };
  foldl(res, c, getBuffer (insns))
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (i)       -> singletonBuffer (CONST (expr.fst)) |
    Var   (i)       -> singletonBuffer (LD (expr.fst)) | 
    Binop (i, n, x) -> compileExpr (expr.snd) <+> compileExpr (expr[2]) <+ BINOP (expr.fst) |
    _               -> failure ("Failure at compileExpr - Incorrect expression for SM\n")
  esac
}

fun funcBinop ([x1:x2:y, st, w], inc) {
  var ex = case inc.fst of
    "+"  -> x2 +  x1 |
    "-"  -> x2 -  x1 |
    "*"  -> x2 *  x1 |
    "/"  -> x2 /  x1 |
    "%"  -> x2 %  x1 |
    ">=" -> x2 >= x1 |
    "&&" -> x2 && x1 |
    "==" -> x2 == x1 |
    "!=" -> x2 != x1 |
    "<"  -> x2 <  x1 |
    "<=" -> x2 <= x1 |
    ">"  -> x2 >  x1 |
    "!!" -> x2 !! x1 |
    _    -> failure ("Failure at funcBinop - Incorrect expression for binop\n")
  esac;
  [ex:y, st, w]
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Skip         -> {}                      |
    Assn  (i, n) -> compileExpr (stmt.snd) <+ ST (stmt.fst) |
    Seq   (i, n) -> compileSM (stmt.fst) <+> compileSM (stmt.snd) |    
    Read  (i)    -> listBuffer ({READ, ST (stmt.fst)}) |
    Write (i)    -> compileExpr (stmt.fst) <+ WRITE |
    _            -> failure ("Failure at compileSM - Incorrect expression for stmt\n")
  esac
}