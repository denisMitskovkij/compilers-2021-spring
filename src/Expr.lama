-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Const (i)       -> i |
    Var   (i)       -> st (i) |
    Binop (i, ex1, ex2) -> calcBinop(st, i) (ex1, ex2) |
    _ -> failure("Failure in evalExpr - incorrect expression\n")
  esac
}

fun calcBinop (st, sign) {
  case sign of
    "<"  -> fun (exp1, exp2) {evalExpr (st, exp1) <  evalExpr (st, exp2)} |
    "<=" -> fun (exp1, exp2) {evalExpr (st, exp1) <= evalExpr (st, exp2)} |
    ">"  -> fun (exp1, exp2) {evalExpr (st, exp1) >  evalExpr (st, exp2)} |
    ">=" -> fun (exp1, exp2) {evalExpr (st, exp1) >= evalExpr (st, exp2)} |
    "/"  -> fun (exp1, exp2) {evalExpr (st, exp1) /  evalExpr (st, exp2)} |
    "%"  -> fun (exp1, exp2) {evalExpr (st, exp1) %  evalExpr (st, exp2)} |
    "==" -> fun (exp1, exp2) {evalExpr (st, exp1) == evalExpr (st, exp2)} |
    "+"  -> fun (exp1, exp2) {evalExpr (st, exp1) +  evalExpr (st, exp2)} |
    "-"  -> fun (exp1, exp2) {evalExpr (st, exp1) -  evalExpr (st, exp2)} |
    "&&" -> fun (exp1, exp2) {evalExpr (st, exp1) && evalExpr (st, exp2)} |
    "!!" -> fun (exp1, exp2) {evalExpr (st, exp1) !! evalExpr (st, exp2)} |
    "*"  -> fun (exp1, exp2) {evalExpr (st, exp1) *  evalExpr (st, exp2)} |
    "!=" -> fun (exp1, exp2) {evalExpr (st, exp1) != evalExpr (st, exp2)} |
    _    -> failure("Failure in calcBinop - incorrect binop\n")
  esac
}