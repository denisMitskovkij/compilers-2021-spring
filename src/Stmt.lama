-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
	Read  (i)    -> (
		[c.fst <- [i, readWorld (c.snd)[0]], readWorld (c.snd)[1]]
	)|
    Write (i)    -> (
		[c.fst, writeWorld (evalExpr (c.fst, i), c.snd)]
	) |
    Assn  (nm, ex) -> (
		[c.fst <- [nm, evalExpr (c.fst, ex)], c.snd]
	)|
    Seq   (st1, st2) -> (
		eval (eval (c, st1), st2)
	)|
    Skip         -> c |
    _ -> failure ("Failure in eval - Incorrect stmt func\n")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}